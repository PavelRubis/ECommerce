// <auto-generated />
using System;
using ECommerce.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECommerce.DAL.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    partial class ECommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.DAL.Models.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3286fae2-2039-4207-aa40-1b9771b14f50"),
                            CustomerId = new Guid("630bb5d1-2581-4c20-a347-0d65f4e71d74"),
                            Password = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("f4a8b864-9442-4641-8294-f21704ab0a73"),
                            CustomerId = new Guid("e4921db3-1623-4523-a476-b9f57f2dc901"),
                            Password = "user",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("ECommerce.DAL.Models.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("630bb5d1-2581-4c20-a347-0d65f4e71d74"),
                            Address = "",
                            Code = "0000-2000",
                            Discount = 99m,
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("e4921db3-1623-4523-a476-b9f57f2dc901"),
                            Address = "",
                            Code = "0000-2025",
                            Discount = 10m,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("ECommerce.DAL.Models.ItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee581365-2d0d-463b-967a-37784642e3f8"),
                            Category = "Dress",
                            Code = "20-3333-YY44",
                            Name = "Платье",
                            Price = 10000m
                        },
                        new
                        {
                            Id = new Guid("37f8ca07-7604-4b25-80b2-9acd5cf23217"),
                            Category = "Shoes",
                            Code = "21-3333-YY44",
                            Name = "Туфли",
                            Price = 8500m
                        },
                        new
                        {
                            Id = new Guid("72dcb8b5-477b-4e41-a3f1-70302e097580"),
                            Category = "Hat",
                            Code = "22-3333-YY44",
                            Name = "Кепка",
                            Price = 1000m
                        },
                        new
                        {
                            Id = new Guid("045ababb-fbbc-4400-ba12-f6f740b4a1bc"),
                            Category = "Hat",
                            Code = "23-3333-YY44",
                            Name = "Шляпа 'как-раз'",
                            Price = 7777m
                        },
                        new
                        {
                            Id = new Guid("e2bfe397-74f6-4e8f-a14c-3783aa8f15fb"),
                            Category = "Jeans",
                            Code = "24-3333-YY44",
                            Name = "Джинсы",
                            Price = 2599.99m
                        });
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.AccountEntity", b =>
                {
                    b.HasOne("ECommerce.DAL.Models.CustomerEntity", "Customer")
                        .WithOne("Account")
                        .HasForeignKey("ECommerce.DAL.Models.AccountEntity", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderEntity", b =>
                {
                    b.HasOne("ECommerce.DAL.Models.CustomerEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderItemEntity", b =>
                {
                    b.HasOne("ECommerce.DAL.Models.ItemEntity", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.DAL.Models.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.CustomerEntity", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.ItemEntity", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderEntity", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
