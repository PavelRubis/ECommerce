// <auto-generated />
using System;
using ECommerce.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECommerce.DAL.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    partial class ECommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.DAL.Models.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a3694b3-62cb-41a8-9b53-34148839e5f4"),
                            Password = "admin",
                            Role = "Manager",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("48b8aa04-6f1a-4fbf-84f0-da9b879d3d46"),
                            Password = "user",
                            Role = "Customer",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("ECommerce.DAL.Models.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ca4239c-33c7-4436-a22e-0dca4926e436"),
                            AccountId = new Guid("48b8aa04-6f1a-4fbf-84f0-da9b879d3d46"),
                            Address = "",
                            Code = "0000-2025",
                            Discount = 10m,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("ECommerce.DAL.Models.ItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fad878d-6a70-409a-9570-81bbcdac30c8"),
                            Category = "Dress",
                            Code = "20-3333-YY44",
                            Name = "Платье",
                            Price = 10000m
                        },
                        new
                        {
                            Id = new Guid("df77b0e7-aded-4181-921b-f12043bd18ba"),
                            Category = "Shoes",
                            Code = "21-3333-YY44",
                            Name = "Туфли",
                            Price = 8500m
                        },
                        new
                        {
                            Id = new Guid("864c2f2b-10dc-4ac1-898a-03f3869a1a22"),
                            Category = "Hat",
                            Code = "22-3333-YY44",
                            Name = "Кепка",
                            Price = 1000m
                        },
                        new
                        {
                            Id = new Guid("f1003e5a-e5f9-4bd7-b714-08b3b309e40b"),
                            Category = "Hat",
                            Code = "23-3333-YY44",
                            Name = "Шляпа 'как-раз'",
                            Price = 7777m
                        },
                        new
                        {
                            Id = new Guid("91173937-3192-46bf-be25-70629b473ba3"),
                            Category = "Jeans",
                            Code = "24-3333-YY44",
                            Name = "Джинсы",
                            Price = 2599.99m
                        });
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.CustomerEntity", b =>
                {
                    b.HasOne("ECommerce.DAL.Models.AccountEntity", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("ECommerce.DAL.Models.CustomerEntity", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderEntity", b =>
                {
                    b.HasOne("ECommerce.DAL.Models.CustomerEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderItemEntity", b =>
                {
                    b.HasOne("ECommerce.DAL.Models.ItemEntity", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.DAL.Models.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.AccountEntity", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.CustomerEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.ItemEntity", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderEntity", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
