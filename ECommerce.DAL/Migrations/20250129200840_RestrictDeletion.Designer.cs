// <auto-generated />
using System;
using ECommerce.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECommerce.DAL.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20250129200840_RestrictDeletion")]
    partial class RestrictDeletion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.DAL.Models.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e51c0b8a-93b1-45f3-aac9-644b7b2b3e4b"),
                            IsDeleted = false,
                            Password = "$2a$11$vn/1OQp.DXZxFcjnIZx0MupXS3UIGmrvi9P87hUs1wAjogC.yfyIK",
                            Role = "Manager",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("0ba7fd71-3a71-4f23-985e-17a8a85708a5"),
                            IsDeleted = false,
                            Password = "$2a$11$ZYbIwwDEeH3Nf.NdMwQWYOG2UHO3wavw7GLbEvWEA5mICRJ0kGKVy",
                            Role = "Customer",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("ECommerce.DAL.Models.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("071d0281-9149-4e9f-a450-dc983ca32e59"),
                            AccountId = new Guid("0ba7fd71-3a71-4f23-985e-17a8a85708a5"),
                            Address = "",
                            Code = "0000-2025",
                            Discount = 10m,
                            IsDeleted = false,
                            Name = "user"
                        },
                        new
                        {
                            Id = new Guid("8c54aa80-1973-4273-ac26-c91a64687346"),
                            AccountId = new Guid("e51c0b8a-93b1-45f3-aac9-644b7b2b3e4b"),
                            Address = "",
                            Code = "0000-2024",
                            Discount = 50m,
                            IsDeleted = false,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("ECommerce.DAL.Models.ItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ede589d5-3e28-4dae-9623-a69a91a6af39"),
                            Category = "Dress",
                            Code = "20-3333-YY44",
                            IsDeleted = false,
                            Name = "Платье",
                            Price = 10000m
                        },
                        new
                        {
                            Id = new Guid("5b0fbac3-b208-487d-bef3-f231a9b9ffb7"),
                            Category = "Shoes",
                            Code = "21-3333-YY44",
                            IsDeleted = false,
                            Name = "Туфли",
                            Price = 8500m
                        },
                        new
                        {
                            Id = new Guid("bd7c3fba-4c1b-4230-9e46-752d8f955b10"),
                            Category = "Hat",
                            Code = "22-3333-YY44",
                            IsDeleted = false,
                            Name = "Кепка",
                            Price = 1000m
                        },
                        new
                        {
                            Id = new Guid("5223ede0-681a-4245-b38a-c2499ef32a3b"),
                            Category = "Hat",
                            Code = "23-3333-YY44",
                            IsDeleted = false,
                            Name = "Шляпа 'как-раз'",
                            Price = 7777m
                        },
                        new
                        {
                            Id = new Guid("c1c59410-aea8-4ad7-a17f-33f2f3aef6cf"),
                            Category = "Jeans",
                            Code = "24-3333-YY44",
                            IsDeleted = false,
                            Name = "Джинсы",
                            Price = 2599.99m
                        });
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.CustomerEntity", b =>
                {
                    b.HasOne("ECommerce.DAL.Models.AccountEntity", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("ECommerce.DAL.Models.CustomerEntity", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderEntity", b =>
                {
                    b.HasOne("ECommerce.DAL.Models.CustomerEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderItemEntity", b =>
                {
                    b.HasOne("ECommerce.DAL.Models.ItemEntity", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerce.DAL.Models.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.AccountEntity", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.CustomerEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.ItemEntity", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommerce.DAL.Models.OrderEntity", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
